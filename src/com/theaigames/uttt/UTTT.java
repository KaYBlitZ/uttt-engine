// Copyright 2016 theaigames.com (developers@theaigames.com)

//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at

//        http://www.apache.org/licenses/LICENSE-2.0

//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//	
//    For the full copyright and license information, please view the LICENSE
//    file that was distributed with this source code.

package com.theaigames.uttt;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.theaigames.engine.Engine;
import com.theaigames.engine.gui.GUI;
import com.theaigames.engine.io.IOPlayer;
import com.theaigames.game.GameHandler;
import com.theaigames.game.Processor;
import com.theaigames.uttt.field.MacroField;
import com.theaigames.uttt.player.Player;

/**
 * abstract class AbstractGame
 * 
 * DO NOT EDIT THIS FILE
 * 
 * Extend this class with your main method. In the main method, create an
 * instance of your Logic and run setupEngine() and runEngine()
 * 
 * @author Jim van Eeden <jim@starapple.nl>
 */

public class UTTT implements GameLogic {

	// DEV_MODE can be turned on to easily test the
	// engine from eclipse
	public static void main(String args[]) {
		try {
			UTTT game = new UTTT(args);
			GUI gui = new GUI(game);
			gui.setVisible(true);
			game.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public Engine engine; // runs game
	public GameHandler processor; // handles data
	private List<Player> players;
	private MacroField mMacroField;

	public UTTT(String args[]) throws Exception {
		players = new ArrayList<Player>(Constants.MAX_PLAYERS);
		mMacroField = new MacroField();
		processor = new Processor(players, mMacroField);
		engine = new Engine();

		if (Constants.DEV_MODE) {
			if (Constants.TEST_BOT_1 == null || Constants.TEST_BOT_1.isEmpty() || Constants.TEST_BOT_2 == null
					|| Constants.TEST_BOT_2.isEmpty()) {
				throw new RuntimeException("DEV_MODE: Please set 'TEST_BOT_1' and 'TEST_BOT_2' in your main class.");
			}
			createPlayer(Constants.TEST_BOT_1, 1);
			createPlayer(Constants.TEST_BOT_2, 2);

			return;
		} else {
			// add the bots from the arguments if not in DEV_MODE
			if (args.length < 2) {
				throw new RuntimeException("Two bot commands needed.");
			}

			// add the players
			createPlayer(args[0], 1);
			createPlayer(args[1], 2);
		}
	}

	@Override
	public void createPlayer(String command, int id) {
		try {
			// Create new process
			Process process = Runtime.getRuntime().exec(command);
			// Attach IO to process
			IOPlayer ioPlayer = new IOPlayer(process, "ID_" + id);
			// Start running
			ioPlayer.run();

			String playerName = "player" + id;
			Player player = new Player(playerName, ioPlayer, id);
			players.add(player);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void sendSettings(Player player) {
		player.sendSetting("timebank", Constants.TIMEBANK_MAX);
		player.sendSetting("time_per_move", Constants.TIME_PER_MOVE);
		player.sendSetting("player_names", this.players.get(0).getName() + "," + this.players.get(1).getName());
		player.sendSetting("your_bot", player.getName());
		player.sendSetting("your_botid", player.getId());
	}

	/**
	 * @return : True when the game is over
	 */
	@Override
	public boolean isGameOver() {
		if (processor.isGameOver() || processor.getRoundNumber() > Constants.MAX_ROUNDS) {
			return true;
		}
		return false;
	}

	/**
	 * Play one round of the game
	 * 
	 * @param roundNumber
	 *            : round number
	 */
	@Override
	public void playRound() {
		for (Player player : players)
			player.addToDump("Round " + processor.getRoundNumber());
		processor.playRound();
	}

	@Override
	public void start() {
		engine.setLogic(this);
		engine.start();
		for (Player player : players) {
			sendSettings(player);
		}
	}

	/**
	 * close the bot processes, save, exit program
	 */
	@Override
	public void finish() {
		// stop the bots
		for (Player player : players)
			player.finish();
		try {
			Thread.sleep(100);
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		if (Constants.DEV_MODE) { // print the game file when in DEV_MODE
			String playedGame = processor.getPlayedGame();
			System.out.println(playedGame);
		} else { // save the game to database
			try {
				saveGame();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		System.out.println("Done.");
	}

	/**
	 * Does everything that is needed to store the output of a game
	 */
	public void saveGame() {
		// save results to file here
		String playedGame = processor.getPlayedGame();
		System.out.println(playedGame);
	}

	/* For GUI */
	public int[] getMacroBoard() {
		return mMacroField.getMacroBoard();
	}

	public int[] getField() {
		return mMacroField.getField();
	}

	public int getCurrentPlayerId() {
		return mMacroField.getCurrentPlayerId();
	}
}
